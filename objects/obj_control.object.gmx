<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initial setup
randomize();
var sprite_size = 32;
var totalRoomNumber = 2;
var numberOfRooms = 0;
globalvar totalRooms;
totalRooms = 0;

var height = room_height / sprite_size;
var width = room_width / sprite_size;

init(width, height);

var minRoomSize = 5;
var maxRoomSize = 7;

//Room generation
var roomW = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
var roomH = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
var j = irandom(width - roomW - 1) + 1;
var i = irandom(height - roomH - 1) + 1;

var roomCheck = 0;
var collide = false;
var currRoom, x1, x2, y1, y2, spacing, numCollisions = 0, door;

//Brute force initial room
roomW = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
roomH = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
j = irandom(width - roomW - 1) + 1;
i = irandom(height - roomH - 1) + 1;
door = choose (1, 2, 3, 4);
addRoom(j, i, roomW, roomH, door, 0);
numberOfRooms++;
roomW = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
roomH = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
j = irandom(width - roomW - 1) + 1;
i = irandom(height - roomH - 1) + 1;

while(totalRooms &lt;= totalRoomNumber) {
    while (roomCheck &lt; totalRooms) {
        currRoom = ds_list_find_value(rooms, roomCheck)
        x1 = ds_map_find_value(currRoom, "x1");
        y1 = ds_map_find_value(currRoom, "y1");
        x2 = ds_map_find_value(currRoom, "x2");
        y2 = ds_map_find_value(currRoom, "y2");
        spacing = 1;
        if (!(x2+spacing &gt;= j &amp;&amp; x1-spacing &lt;= (j + roomW-1) &amp;&amp; y2+spacing &gt;= i &amp;&amp; y1-spacing &lt;= (i + roomH-1))) {
            roomCheck++
        }
        else {
            collide = true;
            roomCheck = totalRooms;
        }
    }
    roomCheck = 0; 
    if (collide){
        if (numCollisions &gt; 20)
            break;
        numCollisions ++;
        collide = false;
        roomW = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
        roomH = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
        j = irandom(width - roomW - 1) + 1;
        i = irandom(height - roomH - 1) + 1; 
    }
    else {
        for (var k = 0; k &lt; roomH; k++) {
            for (var l = 0; l &lt; roomW; l++) {
                if (k == 0) {
                     ds_map_replace(ds_grid_get(dungeon, j+l, i+k), "blockType",1);
                }
                else if (k == roomH-1) {
                     ds_map_replace(ds_grid_get(dungeon, j+l, i+k), "blockType", 1);
                }
                else if (l == 0) {
                    ds_map_replace(ds_grid_get(dungeon, j+l, i+k), "blockType", 1);
                }
                else if (l == roomW-1) {
                    ds_map_replace(ds_grid_get(dungeon, j+l, i+k), "blockType", 1);
                }
                else 
                    ds_map_replace(ds_grid_get(dungeon, j+l, i+k), "blockType", 2); 
            }
        }
        door = choose (1, 2, 3, 4);
        addRoom(j, i, roomW, roomH, door, ds_list_find_value(rooms, numberOfRooms-1));
        numberOfRooms++;
        roomW = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
        roomH = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
        j = irandom(width - roomW - 1) + 1;
        i = irandom(height - roomH - 1) + 1;
    }

}

draw(width, height);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_yview += 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview += 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_yview -= 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview -= 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
