<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initial setup
randomize();
var sprite_size = 32;
var totalRoomNumber = 2;
var numberOfRooms = 0;
globalvar totalRooms;
totalRooms = 0;

 height = room_height / sprite_size;
 width = room_width / sprite_size;

init(width, height);

var minRoomSize = 5;
var maxRoomSize = 7;

var roomCheck = 0;
var collide = false;
var currRoom, x1, x2, y1, y2, spacing, numCollisions = 0, freeConnections, maxConnections, door, connectionAttempt=0, connections;

//Initial room at center of map with 3 potential connections
roomW = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
roomH = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
var j = width / 2 - roomW / 2;
var i = height / 2 - roomH / 2;
show_message(string(j) + ", " + string(i));
addRoom(j, i, roomW, roomH, 3); 

roomW = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
roomH = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);

// currRoom = ds_list_find_value(rooms, 0)
// var array2 = ds_map_find_value(currRoom,"connections")

while(ds_list_size(rooms) &lt; totalRoomNumber) { 
        roomCheck = irandom(ds_list_size(rooms)-1);
        currRoom = ds_list_find_value(rooms, roomCheck)
        freeConnections = ds_map_find_value(currRoom, "freeConnections");
        connections = ds_map_find_value(currRoom,"connections");
        if (freeConnections == 0) {
            roomCheck = irandom(ds_list_size(rooms)-1);
        }
        else {
            x1 = ds_map_find_value(currRoom, "x1");
            y1 = ds_map_find_value(currRoom, "y1");
            x2 = ds_map_find_value(currRoom, "x2");
            y2 = ds_map_find_value(currRoom, "y2");
            tempH = ds_map_find_value(currRoom, "height");
            tempW = ds_map_find_value(currRoom, "width");
            connectionAttempt = 0;
            
            while(connectionAttempt &lt; freeConnections) {
                door = choose(0, 1, 2, 3);
                var corridorLength = 2;
                if (door == 0 &amp;&amp; connections[door] == 0 &amp;&amp; (y1 - roomH - corridorLength) &gt; 0) {
                    if (!checkCollision(x1 + ((x2 - x1) / 2) - (roomW / 2),y1 - roomH - corridorLength, roomW, roomH)) {
                        addRoom(x1 + ((x2 - x1) / 2) - (roomW / 2),y1 - roomH - 1, roomW, roomH, 2);
                        for (var k = 0; k &lt; corridorLength+1; k++) {
                            ds_map_replace(ds_grid_get(dungeon, x1 + ((x2 - x1) / 2), y1-k+1), "blockType", 2);       
                        }
                        connections[door] = 1;   
                        connectionAttempt = freeConnections;
                        freeConnections--;
                        ds_map_replace(currRoom, "freeConnections", freeConnections);
                    }
                    else 
                        connectionAttempt++;
                }
                else if (door == 1 &amp;&amp; connections[door] == 0 &amp;&amp; (x1 + tempW + corridorLength + roomW) &lt; room_width-1) {
                    if (!checkCollision(x1 + tempW + corridorLength,y1 + ((y2 - y1) / 2) - (roomH / 2), roomW, roomH)) {
                        addRoom(x1 + tempW + corridorLength,y1 + ((y2 - y1) / 2) - (roomH / 2), roomW, roomH, 2);
                        for (var k = 0; k &lt; corridorLength; k++) {
                            ds_map_replace(ds_grid_get(dungeon, x1 + tempW + k, y1 + (y2 - y1) / 2), "blockType", 2);       
                        }
                        connections[door] = 1;   
                        connectionAttempt = freeConnections;
                        freeConnections--;
                        ds_map_replace(currRoom, "freeConnections", freeConnections);
                    }
                    else 
                        connectionAttempt++;
                }
                else if (door == 2 &amp;&amp; connections[door] == 0 &amp;&amp; (y1 + tempH + corridorLength + roomH) &lt; room_height) {
                    if (!checkCollision(x1 + ((x2 - x1) / 2) - (roomW / 2),y1 + tempH + corridorLength, roomW, roomH)) {
                        addRoom(x1 + ((x2 - x1) / 2) - (roomW / 2),y1 + tempH + corridorLength, roomW, roomH, 2);
                        //show_message("[" +string(x1)+ "," +string(y1) + "] " + string(tempH) + " + " + string(corridorLength));
                        for (var k = 0; k &lt; corridorLength+1; k++) {
                            ds_map_replace(ds_grid_get(dungeon, x1 + ((x2 - x1) / 2), y1 + (y2 - y1)-2 + k)-1, "blockType", 2);       
                        }
                        connections[door] = 1;   
                        connectionAttempt = freeConnections;
                        freeConnections--;
                        ds_map_replace(currRoom, "freeConnections", freeConnections);
                    }
                    else 
                        connectionAttempt++;
                }
                else if (door == 3 &amp;&amp; connections[door] == 0 &amp;&amp; (x1 - roomW - corridorLength) &gt; 0) {
                    if (!checkCollision(x1 - roomW - corridorLength,y1 + ((y2 - y1) / 2) - (roomH / 2), roomW, roomH)) {
                        addRoom(floor(x1 - roomW - corridorLength),floor(y1 + ((y2 - y1) / 2) - (roomH / 2)), roomW, roomH, 2);
                        //show_message(string(floor(x1 - roomW - corridorLength)) + " " + string(floor(y1 + ((y2 - y1) / 2) - (roomH / 2))) + " w:" + string(roomW) + " x1:" + string(x1));
                        for (var k = 0; k &lt; corridorLength+1; k++) {
                            ds_map_replace(ds_grid_get(dungeon, x1 - k+1, y1 + (y2 - y1) / 2), "blockType", 2);       
                        }
                        connections[door] = 1;   
                        connectionAttempt = freeConnections;
                        freeConnections--;
                        ds_map_replace(currRoom, "freeConnections", freeConnections);
                    }
                    else 
                        connectionAttempt++;
                }
                /*spacing = 1;
                if (!(x2+spacing &gt;= j &amp;&amp; x1-spacing &lt;= (j + roomW-1) &amp;&amp; y2+spacing &gt;= i &amp;&amp; y1-spacing &lt;= (i + roomH-1))) {
                    roomCheck++
                }
                else {
                    collide = true;
                    roomCheck = ds_list_size(rooms);
                }*/
            }
        }
    
    
    roomW = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
    roomH = minRoomSize + irandom(maxRoomSize - minRoomSize + 1);
}

draw(width, height);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_yview += 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview += 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_yview -= 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview -= 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; height; i++) {
    for (var j = 0; j &lt; width; j++) {
    draw_set_color(c_white);
    
    draw_text(j*32, i*32, string(j));
    draw_text(j*32, i*32+13, string(i));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
